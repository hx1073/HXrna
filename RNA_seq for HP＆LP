1.WGCNA安装与数据导入
###加载WGCNA
library("WGCNA")
options(stringsAsFactors = FALSE)
##R语言对高低组进行产蛋
setwd("D:\\1HX\\0.1课题-2025\\下丘脑_垂体_卵巢\\高低产蛋对比\\1高低产蛋对比")

library("WGCNA")
options(stringsAsFactors = FALSE)
enableWGCNAThreads() #开启多线程
###导入表达矩阵
#datExpr0 <- read.csv(file ="D:\\1HX\\0.1课题-2025\\2bulk转录组\\自分析_4\\wgcna分析\\final_data.csv",header = T,row.names = 1)
datExpr0 <- read.csv("fpkm_to_tpm_HL.csv",header = T,row.names = 1)#h换成tpm来进行计算
datExpr <- t(datExpr0)
###导入性状矩阵
dataTraits <- read.csv(file = "D:\\1HX\\0.1课题-2025\\下丘脑_垂体_卵巢\\高低产蛋对比\\1高低产蛋对比\\trait.csv",header = T,row.names = 1)
gsg = goodSamplesGenes(datExpr0, verbose = 3);# 检查数据中样本和基因的质量
gsg$allOK
if (!gsg$allOK){
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0) # 打印出将要被移除的基因名
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)  # 打印出将要被移除的样本名
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}# 如果存在不符合质量标准的样本或基因，则进行移除
sampleTree = hclust(dist(datExpr,method='manhattan'), method = "average")

2.样品和power值筛选
###聚类树绘制
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
#聚类树中离群样品建议删除后重新分析

##筛选power值
###使用pickSoftThreshold 函数筛选power值,power 的筛选原则是使构建的网络更符合无标度网络特征
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5,RsquaredCut = 0.8)
#展示最佳的power值
sft$powerEstimate
###power值筛选可视化
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red");
abline(h=0.8,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

#3.共表达模块构建和模块聚类树绘制
###一步法构建相关性网络
sft$powerEstimate
cor <- WGCNA::cor
net = blockwiseModules(datExpr, power = sft$powerEstimate,maxBlockSize =40000,
                       TOMType = "unsigned", minModuleSize = 30,
                       reassignThreshold = 0, mergeCutHeight = 0.25,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,saveTOMFileBase = "femaleMouseTOM", 
                       verbose = 3)
cor<-stats::cor
###查看模块类型和数量
mergedColors = labels2colors(net$colors)
table(mergedColors)

###绘制模块层级聚类树
sizeGrWindow(12, 9)
mergedColors = labels2colors(net$colors)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],"Module colors",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)

#4.共表达模块分析
MEList = moduleEigengenes(datExpr, colors = mergedColors) 
###计算得到的模块特征值
MEs = MEList$eigengenes
MET = orderMEs(MEs)
rownames(MET) <- rownames(datExpr)
###绘制模块间相关性热图
plotEigengeneNetworks(MET, '', marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), 
                      cex.lab =0.8, xLabelsAngle= 90,printAdjacency = T,cex.adjacency = 0.6)

#模块基因可视化热图
nSelect = 400
set.seed(10);
dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = sft$powerEstimate);
nGenes = ncol(datExpr)
select = sample(nGenes, size = nSelect);
selectTOM = dissTOM[select, select];
selectTree = hclust(as.dist(selectTOM), method = 'average')
selectColors = mergedColors[select];
plotDiss = selectTOM^7;
diag(plotDiss) = NA;
TOMplot(plotDiss, selectTree, selectColors, main = "Network heatmap plot, selected genes")

#模块与性状相关性图
nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs0[1:6,1:6]

MEs = orderMEs(MEs0)
MEs[1:6,1:6]

moduleTraitCor = cor(MEs, dataTraits, use = "p");
moduleTraitCor[1:6,1:6]

moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
moduleTraitPvalue[1:6,1:6]

sizeGrWindow(10,6)
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(9, 10, 3, 3));
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(dataTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))

# 确定 ANXA2(ENSGALG00000003770) 基因在 datExpr 中的位置
geneIndex <- which(colnames(datExpr) == "ANXA2")
# 如果找到基因，则检查它的模块颜色
if (length(geneIndex) > 0) {
  geneModule <- mergedColors[geneIndex]
  cat("ANXA2 is in the", geneModule, "module.\n")
} else {
  cat("ANXA2 gene not found in the expression data.\n")
}

#模块基因表达模式分析
moduleColors <- labels2colors(net$colors)
modules <- moduleColors
###black 模块基因表达模式
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 3))
plotMat(t(scale(datExpr[,modules=="brown"])), nrgcols=30, rlabels=F, clabels=F,rcols="brown", main="brown", cex.main=1.5)
par(mar=c(5, 2.5, 0, 0.7))
ME <- MEs[,"MEblack"]
names(ME) <- rownames(datExpr)
barplot(ME, col="brown", main="", cex.main=0.6,ylab="eigengene expression", xlab="array sample")

#5.模块导出
TOM <- TOMsimilarityFromExpr(datExpr, power = sft$powerEstimate)
###选择需要导出的模块颜色
modules <- c("brown")
###Cytoscape文件导出
probes <- colnames(datExpr)
inModule <- is.finite(match(moduleColors, modules))
modProbes <- probes[inModule]
modTOM <- TOM[inModule, inModule]
dimnames(modTOM) <- list(modProbes, modProbes)
#通过修改threshold值改变网络复杂程度，threshold值越低网络越复杂
cytoscape <- exportNetworkToCytoscape(modTOM,
                                      nodeFile = paste("TPM-One-step-CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
                                      edgeFile = paste("TPM-One-step-CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
                                      weighted = TRUE,
                                      nodeNames = modProbes,
                                      threshold = 0.4,
                                      nodeAttr = moduleColors[inModule])

#以上是根据生信益站内容进行修改后保存
##后面是自己增加内容用于富集分析
library(clusterProfiler)
library(org.Gg.eg.db)
library(enrichplot)
library(ggplot2)
########模块基因富集分析#########
library(ggplot2)
# 确保 net 对象包含颜色信息并转换为颜色标签
if (exists("net") && !is.null(net$colors)) {
  color_labels <- labels2colors(net$colors)  # 将数字标签转换为颜色名称
  names(color_labels) <- colnames(datExpr)  # 给每个颜色标签加上基因名
  cat("net 对象存在并包含颜色标签。\n")
} else {
  stop("net 对象不存在或没有颜色标签，请检查 WGCNA 分析步骤。\n")
}

# 检查所有模块颜色及其对应基因数量
module_colors_table <- table(color_labels)
print(module_colors_table)

# 确认 brown 模块是否存在并提取基因
if ("turquoise" %in% names(module_colors_table)) {
  cat("blue 模块基因数量：", module_colors_table["turquoise"], "\n")
  turquoise_genes <- names(color_labels)[color_labels == "turquoise"]
  print(turquoise_genes)
} else {
  stop("blue 模块不存在，请检查模块识别过程。\n")
}

#保存为csv
# 检查所有模块颜色及其对应基因数量
module_colors_table <- table(color_labels)
print(module_colors_table)
write.csv(turquoise_genes, "turquoise_genes.csv", row.names = FALSE)
HPvsLP_deg_up <- read.csv("HPvsLP_deg_up.csv")
# 读取turquoise 模块的基因列表
turquoise_genes <- read.csv("turquoise_genes.csv", stringsAsFactors = FALSE)
# 读取HPvsLP_deg_up.csv文件
HPvsLP_deg_up <- read.csv("HPvsLP_deg_up.csv", stringsAsFactors = FALSE)
# 提取gene_name列
gene_names <- HPvsLP_deg_up$gene_name
# 计算交集
common_genes <- intersect(turquoise_genes$x, gene_names)
# 打印交集的基因数量和基因名
cat("交集中的基因数量：", length(common_genes), "\n")
print(common_genes)
# 将交集结果保存为CSV文件
write.csv(common_genes, "common_genes.csv", row.names = FALSE)

##富集模块盒DEGs的COMMON基因
# 确保common_genes是字符向量
common_genes <- as.character(common_genes)
# 将基因符号转换为ENTREZ ID
entrez_ids <- bitr(common_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Gg.eg.db)
# 检查转换结果，处理可能的NA值或转换失败的情况
good_ids <- na.omit(entrez_ids$ENTREZID)
# 执行KEGG富集分析，使用鸡的KEGG代码'gga'
kegg_result <- enrichKEGG(gene = good_ids, organism = 'gga', keyType = 'kegg')
print(kegg_result)
# 可视化富集结果
barplot(kegg_result, showCategory=20) 

# 执行GO富集分析
go_results <- enrichGO(gene = good_ids,
                       OrgDb = org.Gg.eg.db,
                       keyType = "ENTREZID",
                       ont = "BP",  # 可以选择 "BP" , "CC" , "MF" 
                       pAdjustMethod = "BH",
                       qvalueCutoff = 0.05)
# 查看富集分析结果
print(go_results)
# 可视化富集结果
if (nrow(go_results) > 0) {
  # 展示前5个富集显著的GO项
  barplot(go_results, showCategory = 5)
  
  # 使用dotplot来展示GO富集结果
  dotplot(go_results)  
} else {
  cat("没有显著的GO富集结果。\n")
}
# 将enrichResult对象转换为数据框
go_results_df <- as.data.frame(go_results)
# 输出CSV文件
write.csv(go_results_df, "go_enrichment_results.csv", row.names = FALSE)
# 从go_results对象中提取基因ID
gene_list <- go_results_df$geneID
# 分割基因ID字符串为独立的ENTREZ ID
gene_list_split <- strsplit(gene_list, "/")
# 扁平化列表，因为strsplit返回一个列表的列表
all_genes <- unique(unlist(gene_list_split))
# 使用org.Gg.eg.db将ENTREZ ID转换为gene symbol
symbols <- select(org.Gg.eg.db, keys = all_genes, columns = c("SYMBOL"), keytype = "ENTREZID")
# 检查转换结果
head(symbols)
# 创建一个基因ID到gene symbol的映射
gene_map <- setNames(symbols$SYMBOL, symbols$ENTREZID)
# 替换原数据框中的ENTREZID为gene symbol
go_results_df$geneID <- sapply(go_results_df$geneID, function(gene_ids) {
  gene_symbols <- sapply(strsplit(gene_ids, "/")[[1]], function(id) gene_map[id])
  paste(unique(na.omit(gene_symbols)), collapse="/")
})
# 再次保存CSV文件
write.csv(go_results_df, "go_enrichment_results_with_symbols.csv", row.names = FALSE)


# 转换基因符号为 ENTREZ ID
if (length(turquoise_genes) > 0) {
  entrez_ids <- bitr(turquoise_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Gg.eg.db)
  if (nrow(entrez_ids) > 0) {
    print(head(entrez_ids))
  } else {
    stop("未能找到对应的 ENTREZ ID，请检查基因符号或注释数据库。\n")
  }
} else {
  stop("turquoise 模块中没有基因。\n")
}

# 进行 GO 富集分析
if (nrow(entrez_ids) > 0) {
  go_enrich <- enrichGO(gene         = entrez_ids$ENTREZID,
                        OrgDb        = org.Gg.eg.db,
                        keyType      = "ENTREZID",
                        ont          = "ALL",
                        pAdjustMethod = "BH",
                        pvalueCutoff = 0.05,
                        qvalueCutoff = 0.2)
  
  # 打印 GO 富集分析结果
  print(head(go_enrich))
}


# 进行 KEGG 富集分析
if (nrow(entrez_ids) > 0) {
  kegg_enrich <- enrichKEGG(gene         = entrez_ids$ENTREZID,
                            organism     = "gga",  # gga 是 Gallus gallus 的 KEGG 代码
                            pAdjustMethod = "BH",
                            pvalueCutoff = 0.05,
                            qvalueCutoff = 0.2)
  # 打印 KEGG 富集分析结果
  print(head(kegg_enrich))
}

# 可视化富集分析结果
if (!is.null(go_enrich) && nrow(as.data.frame(go_enrich)) > 0) {
  dotplot(go_enrich, showCategory = 10) + ggtitle("GO Enrichment Analysis")
}

if (!is.null(kegg_enrich) && nrow(as.data.frame(kegg_enrich)) > 0) {
  dotplot(kegg_enrich, showCategory = 10) + ggtitle("KEGG Pathway Enrichment Analysis")
}

# 将 enrichResult 对象转换为数据框
go_enrich_df <- as.data.frame(go_enrich)
# 提取 geneID 列并分解为单个 ENTREZ ID
gene_ids <- strsplit(go_enrich_df$geneID, "/")
# 将所有 ENTREZ ID 转换为 Gene Symbol
entrez_ids <- unique(unlist(gene_ids))
id_conversion <- bitr(entrez_ids, fromType = "ENTREZID", toType = "SYMBOL", OrgDb = org.Gg.eg.db)
# 创建一个转换表
conversion_table <- setNames(id_conversion$SYMBOL, id_conversion$ENTREZID)
# 替换每个 geneID 的 ENTREZ ID 为 Gene Symbol
gene_symbols_str <- sapply(gene_ids, function(ids) paste(conversion_table[ids], collapse = "/"))
# 更新 geneID 列
go_enrich_df$geneID <- gene_symbols_str
# 查看转换后的数据框
View(go_enrich_df)
# 保存结果为 CSV 文件
write.csv(go_enrich_df, file = "go_enrichment_results_with_symbols.csv", row.names = FALSE)
cat("GO 富集分析结果已转换并保存为 CSV 文件。\n")
