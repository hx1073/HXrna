
###加载WGCNA
library("WGCNA")
options(stringsAsFactors = FALSE)
##R语言对高低组进行产蛋
setwd("D:\\1HX\\0.1课题-2025\\下丘脑_垂体_卵巢\\高低产蛋对比\\1高低产蛋对比")
library("WGCNA")
options(stringsAsFactors = FALSE)
enableWGCNAThreads() #开启多线程
###导入表达矩阵
#datExpr0 <- read.csv(file ="D:\\1HX\\0.1课题-2025\\2bulk转录组\\自分析_4\\wgcna分析\\final_data.csv",header = T,row.names = 1)
datExpr0 <- read.csv("fpkm_to_tpm_HL.csv",header = T,row.names = 1)#h换成tpm来进行计算
datExpr <- t(datExpr0)
###导入性状矩阵
dataTraits <- read.csv(file = "D:\\1HX\\0.1课题-2025\\下丘脑_垂体_卵巢\\高低产蛋对比\\1高低产蛋对比\\trait.csv",header = T,row.names = 1)

gsg = goodSamplesGenes(datExpr0, verbose = 3);# 检查数据中样本和基因的质量
gsg$allOK
###聚类树计算
#=====================================================================================
if (!gsg$allOK){
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0) # 打印出将要被移除的基因名
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)  # 打印出将要被移除的样本名
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}# 如果存在不符合质量标准的样本或基因，则进行移除
sampleTree = hclust(dist(datExpr,method='manhattan'), method = "average")
###聚类树绘制
sizeGrWindow(12,9)
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)
#聚类树中离群样品建议删除后重新分析


###使用pickSoftThreshold 函数筛选power值,power 的筛选原则是使构建的网络更符合无标度网络特征
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5,RsquaredCut = 0.8)
#展示最佳的power值
sft$powerEstimate
###power值筛选可视化
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red");
abline(h=0.8,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")


###一步法构建相关性网络
sft$powerEstimate
cor <- WGCNA::cor
net = blockwiseModules(datExpr, power = sft$powerEstimate,maxBlockSize =40000,
                       TOMType = "unsigned", minModuleSize = 30,
                       reassignThreshold = 0, mergeCutHeight = 0.25,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       saveTOMs = TRUE,saveTOMFileBase = "femaleMouseTOM", 
                       verbose = 3)
cor<-stats::cor
###查看模块类型和数量
mergedColors = labels2colors(net$colors)
table(mergedColors)

###绘制模块层级聚类树
sizeGrWindow(12, 9)
mergedColors = labels2colors(net$colors)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],"Module colors",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)


MEList = moduleEigengenes(datExpr, colors = mergedColors) 
###计算得到的模块特征值
MEs = MEList$eigengenes
MET = orderMEs(MEs)
rownames(MET) <- rownames(datExpr)
###绘制模块间相关性热图
plotEigengeneNetworks(MET, '', marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), 
                      cex.lab =0.8, xLabelsAngle= 90,printAdjacency = T,cex.adjacency = 0.6)


nSelect = 400
set.seed(10);
dissTOM = 1-TOMsimilarityFromExpr(datExpr, power = sft$powerEstimate);
nGenes = ncol(datExpr)
select = sample(nGenes, size = nSelect);
selectTOM = dissTOM[select, select];
selectTree = hclust(as.dist(selectTOM), method = 'average')
selectColors = mergedColors[select];
plotDiss = selectTOM^7;
diag(plotDiss) = NA;
TOMplot(plotDiss, selectTree, selectColors, main = "Network heatmap plot, selected genes")


nGenes = ncol(datExpr);
nSamples = nrow(datExpr);
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs0[1:6,1:6]

MEs = orderMEs(MEs0)
MEs[1:6,1:6]

moduleTraitCor = cor(MEs, dataTraits, use = "p");
moduleTraitCor[1:6,1:6]

moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
moduleTraitPvalue[1:6,1:6]

sizeGrWindow(10,6)
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(9, 10, 3, 3));
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(dataTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))


# 确定 ANXA2(ENSGALG00000003770) 基因在 datExpr 中的位置
geneIndex <- which(colnames(datExpr) == "OSBP2")
# 如果找到基因，则检查它的模块颜色
if (length(geneIndex) > 0) {
  geneModule <- mergedColors[geneIndex]
  cat("OSBP2 is in the", geneModule, "module.\n")
} else {
  cat("OSBP2 gene not found in the expression data.\n")
}


moduleColors <- labels2colors(net$colors)
modules <- moduleColors
###black 模块基因表达模式
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 3))
plotMat(t(scale(datExpr[,modules=="brown"])), nrgcols=30, rlabels=F, clabels=F,rcols="brown", main="brown", cex.main=1.5)
par(mar=c(5, 2.5, 0, 0.7))
ME <- MEs[,"MEblack"]
names(ME) <- rownames(datExpr)
barplot(ME, col="brown", main="", cex.main=0.6,ylab="eigengene expression", xlab="array sample")


TOM <- TOMsimilarityFromExpr(datExpr, power = sft$powerEstimate)

###选择需要导出的模块颜色
modules <- c("brown")
###Cytoscape文件导出
probes <- colnames(datExpr)
inModule <- is.finite(match(moduleColors, modules))
modProbes <- probes[inModule]
modTOM <- TOM[inModule, inModule]
dimnames(modTOM) <- list(modProbes, modProbes)
#通过修改threshold值改变网络复杂程度，threshold值越低网络越复杂
cytoscape <- exportNetworkToCytoscape(modTOM,
                                      nodeFile = paste("TPM-One-step-CytoscapeInput-nodes-", paste(modules, collapse="-"), ".txt", sep=""),
                                      edgeFile = paste("TPM-One-step-CytoscapeInput-edges-", paste(modules, collapse="-"), ".txt", sep=""),
                                      weighted = TRUE,
                                      nodeNames = modProbes,
                                      threshold = 0.4,
                                      nodeAttr = moduleColors[inModule])
